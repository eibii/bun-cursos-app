// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blacklist {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  token     String
  ip        String
  userUUID  String
  createdAt DateTime @default(now())

  @@index([uuid])
}

model Profile {
  id           Int       @id @default(autoincrement())
  uuid         String    @default(uuid())
  slug         String    @unique @db.VarChar(167)
  name         String    @db.VarChar(80)
  nickname     String?   @db.VarChar(80)
  avatar       String?
  lastAccessAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int       @unique

  @@index([uuid, userId])
  @@map("profiles")
}

model User {
  id              Int       @id @default(autoincrement())
  uuid            String    @default(uuid())
  email           String    @unique
  password        String
  profile         Profile?
  emailVerified   Boolean   @default(false)
  verifiedToken   String?
  verifiedExpires DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  ChatTTS         ChatTTS?
  Group           Group?

  @@index([uuid, email])
}

model Authentication {
  token String @unique

  @@index([token])
}

model Group {
  id      Int       @id @default(autoincrement())
  uuid    String    @default(uuid())
  name    String    @db.VarChar(80)
  icon    String    @db.VarChar(40)
  chatTTS ChatTTS[]
  userId  Int       @unique
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([uuid, userId, name])
  @@map("groups")
}

model ChatTTS {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  name       String   @db.VarChar(80)
  promptText String
  filename   String   @unique
  urlFile    String
  userId     Int      @unique
  groupId    Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([uuid, userId, groupId, filename])
}
